{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QUniversit√† degli Studi di Trento\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QFor the implementation of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q's tool introduced earlier, I have decided to start from a work done by my colleague Wendy Barreto \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q in her bachelor thesis, which realized a similar tool for \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q and \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q SSO protocols, this was a good base to start with my implementation.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTest example: PKCE Downgrade.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTo understand this test, a brief introduction of PKCE has to be done, as said in \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q: The Proof Key for Code Exchange (PKCE, pronounced pixie) extension describes a technique for public clients to mitigate the threat of having the authorization code intercepted.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe PKCE Downgrade test has as objective to test an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q vulnerability where removing the parameter \"codechallenge\" from the url of an authorization request message will be downgrading the authentication proces in a way that PKCE will not be used if the service is vulnerable \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"EN_A_VS_AN","sentence":"^\\QThe PKCE Downgrade test has as objective to test an \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q vulnerability where removing the parameter \"codechallenge\" from the url of an authorization request message will be downgrading the authentication proces in a way that PKCE will not be used if the service is vulnerable \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTo test this, we have to intercept the authorization request message, remove the parameter \"codechallenge\" from it, and then forward it.\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qoperations, a list of Operation objects which will be executed.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThe Check Object is defined by: where to search the given parameter (head, body or url) check param specify the parameter name to be searched And the actual checks on the parameter value: (if none of these are specified, the Check will only check if the given parameter is present or not) is the parameter value is exactly what is passed to this tag not is the parameter value is not what is passed to this tag contains not contains is present\\E$"}
{"rule":"PLURAL_VERB_AFTER_THIS","sentence":"^\\QThis Validate Operation will be used by the Oracle to decide whether the test should be considered passed or not.\\E$"}
{"rule":"FILE_EXTENSIONS_CASE","sentence":"^\\QType xml.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn the PKCE example above, we have just a simple Message Operation which has to remove the parameter \"codechallenge\" frome the url of the message, so the resulting Message Operation will be:\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QIn the PKCE example above, we have just a simple Message Operation which has to remove the parameter \"codechallenge\" from the url of the message, so the resulting Message Operation will be:\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QThis changes also for the \"decode parameter\" tag, in a way that if the message section is 'body' the \"decode param\" will accept a regex, and everything matched by that regex will be considered to be decoded.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QAs a result, if \"saml request\" is used in an Operation, the message having the parameter \"SAMLRequest\" in his url will be intercepted and processed by the Operation.\\E$"}
{"rule":"A_INFINITIVE","sentence":"^\\QThe oracle is based on three main components: Evaluation of the complete (or incomplete) execution of the \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q Evaluation of the Precondition objects Evaluation of the Validate objects If all the above conditions are met, the test is considered passed, otherwise it is considered failed.\\E$"}
{"rule":"MORFOLOGIK_RULE_EN_US","sentence":"^\\QTo build the oracle for the PKCE example above, both the result of the test and the precondition has been used: With this precondition, the test has to be considered \"not applicable\" if the parameter codechallenge is not found in the authorization request message.\\E$"}
{"rule":"ID_CASING","sentence":"^\\QThe supported actions are: open \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q url \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, to open an url click \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q id=, link=, xpath= \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, to click on a http object with the given id, link or xpath type \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q id= \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q text, to write on a given http element the given text wait \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q milliseconds, to make the execution of the session wait for a given time clear cookies \\E(?:Dummy|Ina|Jimmy-)[0-9]+\\Q, to make the browser of the session clear all of the cookies in it\\E$"}
{"rule":"COMMA_PARENTHESIS_WHITESPACE","sentence":"^\\Qis an operator that tells that the preceding symbol will be matched 0 or 1 times * is an operator that tells that the preceding symbol will be matched 0 or more times .\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qmatches any character except line breaks\\E$"}
{"rule":"UPPERCASE_SENTENCE_START","sentence":"^\\Qis an operator that tells that the preceding symbol will be matched 0 or 1 times * is an operator that tells that the preceding symbol will be matched 0 or more times .\\E$"}
